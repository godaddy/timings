# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Timings CI - release

on:
  workflow_run:
    workflows: ["Timings CI - test"]
    branches: [main]
    types: 
      - completed

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install, build, and run tests
      id: npm_ci
      run: |
        npm ci

    # Run release
    - name: semantic-release [DRY-RUN]
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      id: release
      run: |
        echo "lastRelease=`cat package.json | jq -r .version`" >> $GITHUB_OUTPUT

        npx semantic-release | tee release.output;

        echo "hasRelease=`if (grep -q 'The next release version is' release.output); then echo true; else echo false; fi`" >> $GITHUB_OUTPUT
        echo "nextRelease=`grep 'The next release version is' release.output | sed -E 's/.* ([[:digit:].]+)$/\1/'`" >> $GITHUB_OUTPUT

    - name: Update job summary after semantic-release
      run: |
        if [ '${{ steps.release.outputs.hasRelease }}' == 'true' ]; then
          echo - A new release was be published! >> $GITHUB_STEP_SUMMARY
          echo - Last Release: **${{ steps.release.outputs.lastRelease }}** >> $GITHUB_STEP_SUMMARY
          echo - Next Release: **${{ steps.release.outputs.nextRelease }}** >> $GITHUB_STEP_SUMMARY
        else
          echo - No release was published! The current release is: **${{ steps.release.outputs.lastRelease }}** >> $GITHUB_STEP_SUMMARY
        fi

    - name: Set up Docker Buildx
      if: steps.release.outputs.hasRelease == 'true'
      id: buildx
      uses: docker/setup-buildx-action@master
    - name: Cache Docker layers
      if: steps.release.outputs.hasRelease == 'true'
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    - name: Login to Docker Hub
      if: steps.release.outputs.hasRelease == 'true'
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Docker Build and Push
      if: steps.release.outputs.hasRelease == 'true'
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        tags: |
          godaddy/timings:latest
          godaddy/timings:${{ steps.release.outputs.nextRelease }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}
