# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Timings CI - release

on:
  workflow_run:
    workflows: ["Timings CI - test"]
    branches: [main]
    types: 
      - completed

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      release-outputs: ${{ steps.release.outputs }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Semantic Release
      uses: cycjimmy/semantic-release-action@v3
      id: release
      with:
        branches: main
        extra_plugins: |
          @semantic-release/changelog
          @semantic-release/git
          @semantic-release/npm
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Update job summary after semantic-release
      run: |
        if [ '${{ steps.release.outputs.new_release_published }}' == 'true' ]; then
          echo - A new release was be published! >> $GITHUB_STEP_SUMMARY
          echo - Last Release: **${{ steps.release.outputs.last_release_version }}** >> $GITHUB_STEP_SUMMARY
          echo - Next Release: **${{ steps.release.outputs.new_release_version }}** >> $GITHUB_STEP_SUMMARY
          echo - Release Notes: **${{ steps.release.outputs.new_release_notes }}** >> $GITHUB_STEP_SUMMARY
        else
          echo - No new Release! The current release is: **${{ steps.release.outputs.last_release_version }}** >> $GITHUB_STEP_SUMMARY
        fi

  build:
    if: ${{ !failure() && !cancelled() }}
    needs: release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Docker Buildx
      if: needs.release.outputs.release-outputs.new_release_published == 'true'
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      if: needs.release.outputs.release-outputs.new_release_published == 'true'
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Login to Docker Hub
      if: needs.release.outputs.release-outputs.new_release_published == 'true'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Docker Build and Push
      if: needs.release.outputs.release-outputs.new_release_published == 'true'
      id: docker_build
      uses: docker/build-push-action@v4
      with:
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        tags: |
          godaddy/timings:latest
          godaddy/timings:${{ needs.release.outputs.release-outputs.new_release_version }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

    - name: Image digest
      run: |
        echo ${{ steps.docker_build.outputs.digest }}
        echo Docker image was published sucessfully! >> $GITHUB_STEP_SUMMARY
        echo - Image ID: **${{ steps.docker_build.outputs.imageid }}** >> $GITHUB_STEP_SUMMARY
        echo - digest: **${{ steps.docker_build.outputs.digest }}** >> $GITHUB_STEP_SUMMARY
        echo - metadata: **${{ steps.docker_build.outputs.metadata }}** >> $GITHUB_STEP_SUMMARY
